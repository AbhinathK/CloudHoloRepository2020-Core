/*
 * HoloStorage Accessor API
 *
 * API to access holograms and metadata from HoloStorage
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"

	"github.com/gin-gonic/gin"
)

// AuthorsAidGet - Get a single author metadata in HoloStorage
func AuthorsAidGet(c *gin.Context) {
	// aid := c.Param("aid")
	// result, err := SearchAuthors([]string{aid})
	// if err != nil {
	// 	c.JSON(http.StatusInternalServerError, Error{ErrorCode: "500", ErrorMessage: err.Error()})
	// 	return
	// }
	// for _, data := range result {
	// 	if (data == Author{}) {
	// 		errMsg := "aid '" + aid + "' cannot be found"
	// 		c.JSON(http.StatusNotFound, Error{ErrorCode: "404", ErrorMessage: errMsg})
	// 		return
	// 	}
	// }
	// c.JSON(http.StatusOK, result)
}

// AuthorsAidPut - Add or update author information
func AuthorsAidPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AuthorsGet - Mass query for author metadata in HoloStorage
func AuthorsGet(c *gin.Context) {
	fhirRequests := make(map[string]FHIRRequest)
	authorsMap := make(map[string]Author)
	aids := ParseQueryIDs(c.Query("aid"))

	for _, aid := range aids {
		fhirURL, _ := ConstructURL(accessorConfig.FhirURL, "Practitioner/"+aid)
		fhirRequests[aid] = FHIRRequest{httpMethod: http.MethodGet, qid: aid, url: fhirURL}
	}

	results := BatchFHIRQuery(fhirRequests)

	for aid, result := range results {
		var tempAuthor PractitionerFHIR
		err := json.Unmarshal(result.response, &tempAuthor)
		if err != nil {
			c.JSON(http.StatusInternalServerError, err.Error())
			return
		}
		if tempAuthor.ID != aid {
			authorsMap[aid] = Author{}
		} else {
			authorsMap[aid] = tempAuthor.ToAPISpec()
		}
	}

	c.JSON(http.StatusOK, authorsMap)
}

// HologramsGet - Mass query for hologram metadata based on hologram ids
func HologramsGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HologramsHidDelete - Delete a hologram in HoloStorage
func HologramsHidDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HologramsHidDownloadGet - Download holograms models based on the hologram id
func HologramsHidDownloadGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HologramsHidGet - Get a single hologram metadata based on the hologram id
func HologramsHidGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HologramsPost - Upload hologram to HoloStorage
func HologramsPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PatientsGet - Mass query for patients metadata in HoloStorage
func PatientsGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PatientsPidGet - Get a single patient metadata in HoloStorage
func PatientsPidGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PatientsPidPut - Add or update basic patient information
func PatientsPidPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
